from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, CallbackContext
import logging
import re
import gspread
from google.oauth2.service_account import Credentials

# C·∫•u h√¨nh logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a credentials
SERVICE_ACCOUNT_FILE = '/Users/apple/Desktop/TelegramBotProject/nice-aegis-416216-b0d230718611.json'

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn Google Sheet
SHEET_ID = '1azM3ZnDvXjXK6fH7qB5IaEiWFAbJJQUTtOi_LNGPtRc'

# C·∫•u h√¨nh Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets.readonly']
credentials = Credentials.from_service_account_file(SERVICE_ACCOUNT_FILE, scopes=SCOPES)
client = gspread.authorize(credentials)
sheet = client.open_by_key(SHEET_ID).sheet1

# H√†m x·ª≠ l√Ω khi user b·∫•m /start
async def start_or_message(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("Xem 300 b√†i h√°t thi·∫øu nhi", callback_data='view_songs')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("Hello S·∫øp ! Coi 300 b√†i h√°t thi·∫øu nhi tr∆∞·ªõc ƒëi S·∫øp !", reply_markup=reply_markup)

# H√†m x·ª≠ l√Ω khi user ch·ªçn m·ªôt trong c√°c n√∫t
async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'view_songs':
        # ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheets
        try:
            data = sheet.get_all_values()

            if len(data) > 3:
                response = "\n".join([
                    f"{i+1}. {row[1]} / {row[3]}"
                    for i, row in enumerate(data[3:])
                    if len(row) > 6
                ])
                await query.message.reply_text(f"Danh s√°ch b√†i h√°t:\n{response}")

                # H·ªèi n·∫øu user mu·ªën xem chi ti·∫øt b√†i h√°t n√†o
                keyboard = [
                    [InlineKeyboardButton("Ok", callback_data='view_song_detail')],
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.message.reply_text("S·∫øp mu·ªën coi n·ªôi dung b√†i n√†o kh√¥ng?", reply_markup=reply_markup)
            else:
                await query.message.reply_text("Kh√¥ng t√¨m th·∫•y b√†i h√°t.")
        except Exception as e:
            logger.error(f"L·ªói khi ƒë·ªçc d·ªØ li·ªáu t·ª´ Google Sheets: {e}")
            await query.message.reply_text("L·ªói x·∫£y ra khi l·∫•y danh s√°ch b√†i h√°t.")


    elif query.data == 'view_song_detail':
        # H·ªèi s·ªë th·ª© t·ª± b√†i h√°t c·∫ßn xem chi ti·∫øt
        await query.message.reply_text("B√†i m·∫•y S·∫øp ?")
        # L∆∞u tr·∫°ng th√°i ƒë·ªÉ nh·∫≠n s·ªë th·ª© t·ª± b√†i h√°t t·ª´ ng∆∞·ªùi d√πng
        context.user_data['waiting_for_song_number'] = True

    elif query.data == 'no_content':
        # K·∫øt th√∫c t√°c v·ª• khi user b·∫•m "Kh·ªèi, ngh·ªâ ƒëi"
        await query.message.reply_text("Ok b√°i bai S·∫øp !")

    elif query.data == 'send_original_content':
        # Y√™u c·∫ßu ng∆∞·ªùi d√πng g·ª≠i b√†i vi·∫øt g·ªëc
        await query.message.reply_text("S·∫øp g·ª≠i b√†i g·ªëc ƒëi, ch·ªó n√†o c·∫ßn thay n·ªôi dung s·∫øp b·ªè v√¥ ngo·∫∑c vu√¥ng d√πm em nha!")
        context.user_data['waiting_for_original_content'] = True

    elif query.data == 'viet_content_vie':
        # Bot ph·∫£n h·ªìi ch·ªù ƒë·ª£i
        await query.message.reply_text("S·∫øp ƒë·ª£i em t√≠!")

        # Thay th·∫ø n·ªôi dung trong ngo·∫∑c vu√¥ng b·∫±ng n·ªôi dung Ti·∫øng Vi·ªát (content_vie)
        original_content = context.user_data.get('original_content', '')
        song_number = context.user_data.get('song_number', -1)

        if song_number != -1:
            data = sheet.get_all_values()
            content_vie = data[song_number + 2][7]  # L·∫•y n·ªôi dung t·ª´ c·ªôt H

            # Thay th·∫ø ƒëo·∫°n vƒÉn trong ngo·∫∑c vu√¥ng b·∫±ng n·ªôi dung Ti·∫øng Vi·ªát
            updated_content = re.sub(r'\[.*?\]', content_vie, original_content)

            # Tr·∫£ k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng
            await query.message.reply_text(f"\n\n{updated_content}")
        else:
            await query.message.reply_text("L·ªói: Kh√¥ng t√¨m th·∫•y s·ªë th·ª© t·ª± b√†i h√°t.")

    elif query.data == 'viet_content_eng':
        # Bot ph·∫£n h·ªìi ch·ªù ƒë·ª£i
        await query.message.reply_text("Wait...")

        # Thay th·∫ø n·ªôi dung trong ngo·∫∑c vu√¥ng b·∫±ng n·ªôi dung English (content_eng)
        original_content = context.user_data.get('original_content', '')
        song_number = context.user_data.get('song_number', -1)

        if song_number != -1:
            data = sheet.get_all_values()
            content_eng = data[song_number + 2][8]  # L·∫•y n·ªôi dung t·ª´ c·ªôt I

            # Thay th·∫ø ƒëo·∫°n vƒÉn trong ngo·∫∑c vu√¥ng b·∫±ng n·ªôi dung English
            updated_content = re.sub(r'\[.*?\]', content_eng, original_content)

            # Tr·∫£ k·∫øt qu·∫£ cho ng∆∞·ªùi d√πng
            await query.message.reply_text(f"\n\n{updated_content}")
        else:
            await query.message.reply_text("Error: Song number not found.")

# H√†m ki·ªÉm tra n·ªôi dung c√≥ n·∫±m trong ngo·∫∑c vu√¥ng kh√¥ng
def contains_square_brackets(text: str) -> bool:
    # S·ª≠ d·ª•ng regex ƒë·ªÉ ki·ªÉm tra ƒëo·∫°n vƒÉn n·∫±m trong ngo·∫∑c vu√¥ng
    return bool(re.search(r'\[.*?\]', text))

# H√†m x·ª≠ l√Ω khi nh·∫≠n tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
async def handle_message(update: Update, context: CallbackContext) -> None:
    if context.user_data.get('waiting_for_song_number'):
        try:
            # Nh·∫≠n s·ªë th·ª© t·ª± b√†i h√°t t·ª´ tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
            song_number = int(update.message.text.strip())
            context.user_data['song_number'] = song_number  # L∆∞u l·∫°i s·ªë b√†i h√°t

            # ƒê·ªçc d·ªØ li·ªáu t·ª´ Google Sheets
            data = sheet.get_all_values()

            if len(data) > 3 and 0 < song_number <= len(data) - 3:
                row = data[song_number + 2]  # S·ªë th·ª© t·ª± b·∫Øt ƒë·∫ßu t·ª´ 1, c·ªông th√™m 2 ƒë·ªÉ l·∫•y d·ªØ li·ªáu ƒë√∫ng h√†ng
                content_vie = row[7]  # C·ªôt H - Ti·∫øng Vi·ªát
                content_eng = row[8]  # C·ªôt I - English
                content_flavor = row[6] # C·ªôt G - M√πi v·ªã
                await update.message.reply_text(f"M√πi v·ªã : {content_flavor}")
                await update.message.reply_text(f"{content_vie}")
                await update.message.reply_text(f"{content_eng}")

                # Sau khi tr·∫£ k·∫øt qu·∫£ b√†i h√°t, h·ªèi n·∫øu ng∆∞·ªùi d√πng mu·ªën vi·∫øt content m·ªõi
                keyboard = [
                    [InlineKeyboardButton("G·ª≠i b√†i vi·∫øt g·ªëc", callback_data='send_original_content')],
                    [InlineKeyboardButton("Kh·ªèi, ngh·ªâ ƒëi c·∫≠u", callback_data='no_content')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text("S·∫øp mu·ªën vi·∫øt content m·ªõi kh√¥ng?", reply_markup=reply_markup)

            else:
                await update.message.reply_text("S·ªë th·ª© t·ª± b√†i h√°t kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.")
        except ValueError:
            await update.message.reply_text("Vui l√≤ng nh·∫≠p m·ªôt s·ªë h·ª£p l·ªá.")
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω s·ªë th·ª© t·ª± b√†i h√°t: {e}")
            await update.message.reply_text("L·ªói x·∫£y ra khi t√¨m ki·∫øm b√†i h√°t.")

        # X√≥a tr·∫°ng th√°i sau khi nh·∫≠n ƒë∆∞·ª£c s·ªë b√†i h√°t
        context.user_data['waiting_for_song_number'] = False

    elif context.user_data.get('waiting_for_original_content'):
        # Nh·∫≠n b√†i vi·∫øt g·ªëc t·ª´ ng∆∞·ªùi d√πng
        original_content = update.message.text
        context.user_data['original_content'] = original_content  # L∆∞u l·∫°i b√†i vi·∫øt g·ªëc

        # Ki·ªÉm tra xem n·ªôi dung c√≥ n·∫±m trong ngo·∫∑c vu√¥ng hay kh√¥ng
        if contains_square_brackets(original_content):
            # H·ªèi xem ng∆∞·ªùi d√πng mu·ªën vi·∫øt b√†i Ti·∫øng Vi·ªát hay English
            keyboard = [
                [InlineKeyboardButton("Ti·∫øng Vi·ªát", callback_data='viet_content_vie')],
                [InlineKeyboardButton("English", callback_data='viet_content_eng')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text("S·∫øp vi·∫øt b√†i ti·∫øng Vi·ªát hay ti·∫øng Anh?", reply_markup=reply_markup)

            # X√≥a tr·∫°ng th√°i sau khi nh·∫≠n ƒë∆∞·ª£c b√†i vi·∫øt g·ªëc h·ª£p l·ªá
            context.user_data['waiting_for_original_content'] = False
        else:
            # Y√™u c·∫ßu user nh·∫≠p l·∫°i n·ªôi dung c√≥ ch·ª©a ngo·∫∑c vu√¥ng
            await update.message.reply_text("S·∫øp check l·∫°i ch·ªó c·∫ßn ƒë·ªïi b·ªè v√¥ ngo·∫∑c vu√¥ng ch∆∞a S·∫øp üòÖ")

        
# H√†m x·ª≠ l√Ω l·ªói
async def error_handler(update: object, context: CallbackContext) -> None:
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# H√†m main kh·ªüi ch·∫°y bot
def main() -> None:
    application = Application.builder().token("7527402100:AAF9UwVZNOi0NQTKkmMAROuMP-V7PJD_F4A").build()

    # Th√™m c√°c handler v√†o bot
    application.add_handler(CommandHandler("start", start_or_message))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_handler))

    # Th√™m handler x·ª≠ l√Ω l·ªói
    application.add_error_handler(error_handler)

    # Ch·∫°y bot
    application.run_polling()

if __name__ == '__main__':
    main()
